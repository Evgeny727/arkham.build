import assert from "node:assert";
import fs from "node:fs";
import path from "node:path";
import { type Node, Window } from "happy-dom";

const RULES_URL =
  "https://raw.githubusercontent.com/Kamalisk/arkhamdb/refs/heads/arkham/src/AppBundle/Resources/views/Default/rulesreference.html.twig";
const RULES_REGEX = /{% block body %}(?<text>.*){% endblock %}/s;

await main();

async function main() {
  const rulesText = await fetchRulesText();
  const doc = documentFromText(rulesText);

  doc.querySelectorAll("script").forEach((script) => {
    script.remove();
  });

  doc.querySelectorAll("[style]").forEach((element) => {
    let styles = element.getAttribute("style") ?? "";
    if (styles.includes("color")) {
      styles = styles.replace("color:red", "color:var(--red);");
      styles = styles.replace("color:blue", "color:var(--blue);");
      element.setAttribute("style", styles || "");
    } else {
      element.removeAttribute("style");
    }
  });

  doc.querySelector("#rop")?.parentElement?.prepend();

  doc.querySelector("#Intro")?.parentElement?.prepend(
    htmlFromString(
      `<nav id="rop-nav">
        <button class="button" id="rop-back">
          <svg
            class="lucide lucide-chevron-left"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="m15 18-6-6 6-6" />
          </svg>
          Back
        </button>
        <a class="button" href="#masthead">Back to top</a>
      </nav>
      `,
    ),
    htmlFromString(`
      <h1 id="top">Rules reference</h1>
    `),
    htmlFromString(`
      <blockquote>
        The content on this page is sourced from <a href="https://arkhamdb.com">ArkhamDB</a> and maintained by <a href="https://github.com/Kamalisk/arkhamdb/commits/arkham/src/AppBundle/Resources/views/Default/rulesreference.html.twig">its contributors</a>. The source code is available <a href="https://github.com/Kamalisk/arkhamdb/blob/arkham/src/AppBundle/Resources/views/Default/rulesreference.html.twig">on GitHub</a>.
      </blockquote>
    `),
  );

  let rulesHtml = doc.querySelector("body")?.innerHTML;
  assert(rulesHtml, "Failed to extract rules HTML from the document");

  rulesHtml = rulesHtml.replaceAll("[body]", "[body_inverted]");
  rulesHtml = rulesHtml.replaceAll("[hand]", "[hand_inverted]");
  rulesHtml = rulesHtml.replaceAll("[tarot]", "[tarot_inverted]");
  rulesHtml = rulesHtml.replaceAll("[arcane]", "[arcane_inverted]");
  rulesHtml = rulesHtml.replaceAll("[ally]", "[ally_inverted]");
  rulesHtml = rulesHtml.replaceAll("[accessory]", "[accessory_inverted]");
  rulesHtml = rulesHtml.replaceAll("[hand_2]", "[hand_x2_inverted]");
  rulesHtml = rulesHtml.replaceAll("[arcane_2]", "[arcane_x2_inverted]");
  rulesHtml = rulesHtml.replaceAll("[unique]", "âœ·");

  const wrappedHtml = wrapReactComponent(rulesHtml);

  const targetPath = path.join(
    import.meta.dirname,
    "../src/pages/rules-reference/rules-reference.tsx",
  );
  await fs.promises.writeFile(targetPath, wrappedHtml, "utf8");
}

function wrapReactComponent(html: string): string {
  return `
  /** This file is auto-generated by scripts/sync-rules.ts. */
  /** biome-ignore-all lint: generated */

  import { useTranslation } from "react-i18next";
  import { AppLayout } from "@/layouts/app-layout";
  import { parseCardTextHtml } from "@/utils/card-utils";
  import { useGoBack } from "@/utils/use-go-back";
  import "./rules-reference.css";

  function RulesReference() {
    const html = \`${html.trim().replaceAll("\t", "  ")}\`;
    const { t } = useTranslation();
    const goBack = useGoBack();

    return (
      <AppLayout title={t("rules.title")}>
        <div
          className="longform rules"
          onClick={(evt) => {
            if (evt.target instanceof HTMLButtonElement && evt.target.getAttribute("id") === "rop-back") {
              goBack();
            }
          }}
          dangerouslySetInnerHTML={{
            __html: parseCardTextHtml(html, { newLines: "skip" }),
          }}
        />
      </AppLayout>
    );
  }

  export default RulesReference;
  `;
}

async function fetchRulesText() {
  const res = await fetch(RULES_URL);
  const text = RULES_REGEX.exec(await res.text())?.groups?.text;
  assert(text, `Failed to extract rules text from ${RULES_URL}`);
  return text;
}

function documentFromText(text: string) {
  const window = new Window();
  window.document.body.innerHTML = text;
  return window.document;
}

function htmlFromString(str: string) {
  const window = new Window();
  window.document.body.innerHTML = str;
  return window.document.body as Node;
}
